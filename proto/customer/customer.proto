syntax = "proto3";
package customer;

// The Customer sercie definition
service Customer {
    // Get all Customers with filter - A server-to-client streaming RPC.
    rpc GetCustomers(CustomerFilter) returns (stream CustomerRequest) {}

    // Create a new Customer - A simple RPC
    rpc CreateCustomer (CustomerRequest) returns (CustomerResponse) {}
}


message CustomerRequest {
    int32 id = 1;   // Unique ID number for a Customer.
    string name = 2;
    string email = 3;
    string phone = 4;

    message Address {
        string street = 1;
        string city = 2;
        string state = 3;
        string zip = 4;
        bool isShippingAddress = 5;
    }

    repeated Address addresses = 5;
}

message CustomerResponse {
    int32 id = 1;
    bool success = 2;
}

message CustomerFilter {
    string keyword = 1;
}




//simple RPC
//    应用于常见的典型的 Request/Response 模型。客户端通过 stub 请求 RPC 的服务端并等待服务端的响应。
//    Server-side streaming RPC
//    客户端给服务端发送一个请求并获取服务端返回的流，用以读取一连串的服务端响应。stream 关键字在响应类型的前面。
//
//    // 例子
//    rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse){}
//
//    Client-side streaming RPC
//    客户端发送的请求 payload 有一连串的的信息，通过流给服务端发送请求。stream 关键字在请求类型前面。
//
//    /／ 例子
//    rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse) {}
//
//    Bidirectional streaming RPC
//    服务端和客户端之间都使用 read-write stream 进行通信。stream 关键字在请求类型和响应类型前面。
//
//    // 例子
//    rpc BidiHello(stream HelloRequest) returns (stream HelloResponse){}
//
//理解 gRPC 提供的四种类型 RPC 方法之后，回到 Customer 的例子中。在 Customer 服务提供了两种类型的 RPC 方法，分别是 simple RPC(CreateCustomer) 和 server-side streaming(GetCustomers) 。CreateCustomer 遵循标准 Request/Response 规范新建一个用户；GetCustomers 方法中，服务端通过 stream 返回多个消费者信息的列表。
//
//作者：hww_面条酱
//链接：http://www.jianshu.com/p/3139e8dd4dd1
//來源：简书
//著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
//**/


